# Concept: https://cw.fel.cvut.cz/b182/_media/courses/bin/linear-space-alignment.pdf
# Abbreviation: Linear-space Sequence Alignment (LSA)

# LoadPenaltyMatrix(MatrixID): Loads and initializes penalty matrix for scoring matches and mismatches
# input: MatrixID (Update file path as needed)
# output: PenaltyMatrix, AA_Num

# DiscoverAdjCol(v, wLetter, match, mismatch, indel, memoryColumn, PenaltyMatrix, AA_Num): Calculates score column adjacent to memory column. This function is cornerstone for discovering the longest path in linear memory.
# Inputs: v (vertical sequence), wLetter (Single letter of horizontal sequence), match (match score), mismatch (mismatch score), indel (indel score), memoryColumn (Score sequence for column 1, which is used as the foundation for finding the score of column 2), PenaltyMatrix (Match scores of numeric AA IDs), AA-Num (Map AA single letter code to numeric identity)
# Output: Adjacent score column to memory column

# MiddleEdge(v, w, match, mismatch, indel, top ='NA', bottom ='NA', left ='NA', right ='NA'): First calculates the vertical index of the middle node from subsets (if designated) of sequences v and w, then alculates the subsequent node to middle node on the longest path. This maps the coordinates for dividing the matrix into two smaller matrices, which will be recursively tested in later functions to find the longest path, or best sequence alignment.
# Inputs: v (vertical sequence), w (horizontal sequence), match (match score), mismatch (mismatch score), indel (indel score), top (designated lower bound of v), bottom (designated upper bound of v), left (designated lower bound of w), right (designated upper bound of w)
# Output: Middle Edge in the form of (MiddleNode vertex, AdjMiddleNode vertex)

# MiddleEdge_LongestPathOutput(v, w, match, mismatch, indel, top ='NA', bottom ='NA', left ='NA', right ='NA'): Uses begining of the MiddleEdge() function but ends early to return the weight of the longest path.

# LinearSpaceAlignment(v, w, match, mismatch, indel, top = 'NA', bottom = 'NA', left = 'NA', right = 'NA') Recursively divides w and calls middle edge with each division to generate a map of the longest path in linear time
# inputs - as described above
# output: Pathway (map of longest pathway as string with: diagonal edge = 'D', horizantal edge = 'H'. vertical edge = 'V')

# LSA_UpperRow(v,Pathway): Provides top string of the final alignment
# inputs - as described above

# LSA_LowerRow(v,Pathway): Provides bottom string of the final alignment
# inputs - as described above

# LSA_CoordinationFuntion(v,w, match, mismatch, indel): Root function - calls MiddleEdge_LongestPathOutput, LinearSpaceAlignment, LSA_UpperRow and LSA_LowerRow for a score and sequence alignment
# inputs - as described above

import numpy as np
import sys
import math
import math
sys.setrecursionlimit(10000)

def LoadPenaltyMatrix(MatrixID):
    Location = 'C:\\Users\\sjhar\\OneDrive\\Documents\\Educational\\Coursera\\BIOI 3\\Wk 2 Penalized Alignments\\{}.txt'.format(str(MatrixID))
    Matrix = list(open(Location, 'r'))
    Matrix = [x.split() for x in Matrix]
    PenaltyMatrix, AA_Num = [], {}
    for row in Matrix[1:]:
        PenaltyMatrix.append(list(map(int, row[1:])))
    PenaltyMatrix = np.matrix(PenaltyMatrix)
    # print(PenaltyMatrix)
    for AA in range(len(Matrix[0])):
        AA_Num[Matrix[0][AA]] = AA
    return PenaltyMatrix, AA_Num

def DiscoverAdjCol(v, wLetter, match, mismatch, indel, memoryColumn, PenaltyMatrix, AA_Num):
    ## Intitalize
    discoveryColumn = [memoryColumn[0] - indel]

    ## Make the algo run just once!!!
    for i in range(1,len(v)+1):
        if match == 'matrix':
            MidScore = PenaltyMatrix.item(AA_Num[v[i - 1]], AA_Num[wLetter])
        else:
            if v[i-1] == wLetter:
                MidScore = match
            else:
                MidScore = -mismatch

        ## Make Comparison:
        discoveryColumn.append(max(discoveryColumn[i-1] - indel, memoryColumn[i] - indel, memoryColumn[i-1] + MidScore))
    return discoveryColumn

def MiddleEdge(v, w, match, mismatch, indel, top ='NA', bottom ='NA', left ='NA', right ='NA'):
    TrueTop, TrueBottom, TrueLeft, TrueRight = top, bottom, left, right
    ## Initialize if needed
    if top == 'NA':
        top = 0
        TrueTop = 0
    if bottom == 'NA':
        bottom = len(v)
        TrueBottom = len(v)
    if left == 'NA':
        left = 0
        TrueLeft = 0
    if right == 'NA':
        right = len(w)
        TrueRight = len(w)
    middleNodeLeft = (right - left) // 2
    middleNodeRight = math.ceil((right - left) / 2)
    v = v[top:bottom]
    w = w[left:right]
    top, bottom, left, right = 0, len(v), 0, len(w)

    ## Initialize variables
    VL, WL = len(v), len(w)
    MiddleNodes, MiddleScores = [], []
    ## Conversion lists for mapping right hand graph
    VConversionList = list(reversed(range(bottom+1)))

    ## Load the penalty matrix
    LoadMatrix = LoadPenaltyMatrix('BLOSUM62')
    PenaltyMatrix, AA_Num = LoadMatrix[0], LoadMatrix[1]

    ##~~~~~~~~~~~~~~~~~~~~~~~Find middle node~~~~~~~~~~~~~~~~~~~~~~~
    ## Initialize memory column for the discovery column
    memoryColumn = []
    for i in range(top, bottom + 1):
        memoryColumn.append(-(indel * (i)))

    ## Finds each column with linear memory from left to right of upper left rectangle
    for i in range(middleNodeLeft):
        # print(v[top:bottom], w[i], match, mismatch, indel, memoryColumn)
        memoryColumn = DiscoverAdjCol(v[top:bottom], w[i], match, mismatch, indel, memoryColumn, PenaltyMatrix, AA_Num)
    FwdMemory1 = memoryColumn

    memoryColumn = []
    for i in range(top, bottom + 1):
        memoryColumn.append(-(indel * (i)))

    vReverse, wReverse = v[::-1], w[::-1]
    for i in range(right - left - 1, middleNodeLeft - 1, -1):
        memoryColumn = DiscoverAdjCol(vReverse, w[i], match, mismatch, indel, memoryColumn, PenaltyMatrix, AA_Num)
    BkdMemory = memoryColumn

    ## Calculate the longest path
    TotalLengthDict, TotalLength = {}, []
    for i in range(bottom-top+1):
        Total = FwdMemory1[i] + BkdMemory[VConversionList[i]]
        TotalLength.append(Total)
        if Total not in TotalLengthDict:
            TotalLengthDict[Total] = i
        else:
            if i < TotalLengthDict[Total]:
                TotalLengthDict[Total] = i

    MiddleV = TotalLengthDict[max(TotalLength)]
    MiddleNode = (MiddleV, middleNodeLeft)
    if len(v)-MiddleV >= 1:
        DownWeight = TotalLength[MiddleV+1]

    else:
        DownWeight = -math.inf

    # Find Adj middle node:
    if left == 0:
        memoryColumn = []
        for i in range(top, bottom + 1):
            memoryColumn.append(-(indel * (i)))

    for i in range(left, middleNodeLeft + 1):
        memoryColumn = DiscoverAdjCol(v[top:bottom], w[i], match, mismatch, indel, memoryColumn, PenaltyMatrix, AA_Num)
    FwdMemory2 = memoryColumn

    if left == 0:
        memoryColumn = []
        for i in range(top, bottom + 1):
            memoryColumn.append(-(indel * (i)))

    vReverse, wReverse = v[::-1], w[::-1]
    for i in range(right -left - 1, middleNodeLeft, -1):
        memoryColumn = DiscoverAdjCol(v[top:bottom][::-1], w[i], match, mismatch, indel, memoryColumn, PenaltyMatrix, AA_Num)
    BkdMemory = memoryColumn

    TotalLengthDict, TotalLength = {}, []

    if MiddleNode[0] == bottom:
        AdjVerticalSearch = MiddleNode[0] + 1
    else:
        AdjVerticalSearch = MiddleNode[0] + 2
    for i in range(MiddleNode[0],AdjVerticalSearch):
        Total = FwdMemory2[i] + BkdMemory[VConversionList[i]]
        if Total not in TotalLengthDict:
            TotalLengthDict[Total] = i
            TotalLength.append(Total)
        else:
            if i < TotalLengthDict[Total]:
                TotalLengthDict[Total] = i
                TotalLength.append(Total)
    if len(TotalLength) > 1:
        if TotalLength[0] > TotalLength[1]:
            AdjMiddleNode = (MiddleNode[0], middleNodeLeft+1)
        else:
            AdjMiddleNode = (MiddleNode[0]+1, middleNodeLeft + 1)
    else:
        AdjMiddleNode = (MiddleNode[0], middleNodeLeft + 1)
    # print(DownWeight, TotalLength)
    if DownWeight > max(TotalLength):
        AdjMiddleNode = (MiddleNode[0] + 1, middleNodeLeft)
    MiddleNode = (MiddleNode[0] + TrueTop, MiddleNode[1] + TrueLeft)
    AdjMiddleNode = (AdjMiddleNode[0] + TrueTop, AdjMiddleNode[1] + TrueLeft)
    return MiddleNode, AdjMiddleNode

def MiddleEdge_LongestPathOutput(v, w, match, mismatch, indel, top ='NA', bottom ='NA', left ='NA', right ='NA'):
    ## Initialize variables
    top, bottom, left, right = 0, len(v), 0, len(w)
    VL, WL = len(v), len(w)

    ## Load the penalty matrix
    LoadMatrix = LoadPenaltyMatrix('BLOSUM62')
    PenaltyMatrix, AA_Num = LoadMatrix[0], LoadMatrix[1]

    ##~~~~~~~~~~~~~~~~~~~~~~~Find middle node~~~~~~~~~~~~~~~~~~~~~~~
    ## Initialize memory column for the discovery column
    memoryColumn = []
    for i in range(top, bottom + 1):
        memoryColumn.append(-(indel * (i)))

    ## Finds the longest path with linear memory
    for i in range(WL):
        memoryColumn = DiscoverAdjCol(v[top:bottom], w[i], match, mismatch, indel, memoryColumn, PenaltyMatrix, AA_Num)
    FwdMemory1 = memoryColumn

    return FwdMemory1[-1]

LongestPathMap = ""
def LinearSpaceAlignment(v, w, match, mismatch, indel, top = 'NA', bottom = 'NA', left = 'NA', right = 'NA'):
    global LongestPathMap
    # print(v, w)
    ## Initialize if needed
    if top == 'NA':
        top = 0
    if bottom == 'NA':
        bottom = len(v)
    if left == 'NA':
        left = 0
    if right == 'NA':
        right = len(w)

    if left == right:
        LongestPathMap += ((bottom-top) * "V")
        return "Vertical Moves"
    if top == bottom:
        LongestPathMap += ((right-left) * "H")
        return "Horizontal Moves"

    middle = (left + right)//2
    midEdge = MiddleEdge(v, w, match, mismatch, indel, top, bottom, left, right)
    midNode = midEdge[0][0]

    ## Find middle edge of top left rectangle
    LinearSpaceAlignment(v, w, match, mismatch, indel, top, midNode, left, middle)

    ## Find dimensions of lower right rectangle based on middle edge direction
    midEdgeDirection = None
    if midEdge[1][1] - midEdge[0][1] == 1:
        middle += 1
        midEdgeDirection = 'H'
    if midEdge[1][0] - midEdge[0][0] == 1:
        midNode += 1
        if midEdgeDirection == 'H':
            midEdgeDirection = 'D'
        else:
            midEdgeDirection = 'V'
    LongestPathMap += midEdgeDirection
    LinearSpaceAlignment(v, w, match, mismatch, indel, midNode, bottom, middle, right)

def LSA_UpperRow(v,Pathway):
    UpperDeck ,j = '', 0
    for i in Pathway:
        if i == 'H':
            UpperDeck += '-'
        if i == 'D' or i == 'V':
            UpperDeck += v[j]
            j += 1
    return UpperDeck

def LSA_LowerRow(w,Pathway):
    UpperDeck ,j = '', 0
    # print(Pathway, w)
    for i in Pathway:
        if i == 'V':
            UpperDeck += '-'
        if i == 'D' or i == 'H':
            UpperDeck += w[j]
            j += 1
    return UpperDeck

def LSA_CoordinationFuntion(v,w, match, mismatch, indel):
    # Get longest path
    Path = MiddleEdge_LongestPathOutput(v,w, match, mismatch, indel)
    print(Path)

    LinearSpaceAlignment(v, w, match, mismatch, indel, top='NA', bottom='NA', left='NA', right='NA')
    global LongestPathMap
    # print(LongestPathMap)
    # Get upper string
    UpperRow = LSA_UpperRow(v,LongestPathMap)
    print(UpperRow)

    # Get lower string
    LowerRow = LSA_LowerRow(w, LongestPathMap)
    print(LowerRow)

    return '\n'.join([str(Path), UpperRow, LowerRow])

Location = 'C:\\Users\\sjhar\\OneDrive\\Documents\\Educational\\Coursera\\BIOI 3\\Wk 2 LinearSpaceAlignment\\dataset_250_14 (3).txt'
TestFile = [x.strip() for x in list(open(Location, 'r'))]
print('File accessed')
file = open('C:\\Users\\sjhar\\OneDrive\\Documents\\Educational\\Coursera\\BIOI 3\\Wk 2 LinearSpaceAlignment\\LSA_Output.txt', "w+")
print('File opened, Number of lines:', len(list(TestFile)))
file.write(LSA_CoordinationFuntion(TestFile[0], TestFile[1], 'matrix', 'matrix', 5))
print('Complete')
